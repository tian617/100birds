// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGE_FLAPPYBIRD_H_
#define FLATBUFFERS_GENERATED_MESSAGE_FLAPPYBIRD_H_

#include "flatbuffers/flatbuffers.h"

namespace FlappyBird {

struct BirdInfo;

struct Message;

enum Type {
  Type_Play = 0,
  Type_SelfInfo = 1,
  Type_Start = 2,
  Type_Tap = 3,
  Type_Turn = 4,
  Type_Heartbeat = 5,
  Type_MIN = Type_Play,
  Type_MAX = Type_Heartbeat
};

inline const Type (&EnumValuesType())[6] {
  static const Type values[] = {
    Type_Play,
    Type_SelfInfo,
    Type_Start,
    Type_Tap,
    Type_Turn,
    Type_Heartbeat
  };
  return values;
}

inline const char * const *EnumNamesType() {
  static const char * const names[7] = {
    "Play",
    "SelfInfo",
    "Start",
    "Tap",
    "Turn",
    "Heartbeat",
    nullptr
  };
  return names;
}

inline const char *EnumNameType(Type e) {
  if (e < Type_Play || e > Type_Heartbeat) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesType()[index];
}

enum BirdType {
  BirdType_Bird_1 = 0,
  BirdType_Bird_2 = 1,
  BirdType_Bird_3 = 2,
  BirdType_Bird_4 = 3,
  BirdType_Bird_5 = 4,
  BirdType_Bird_6 = 5,
  BirdType_Bird_7 = 6,
  BirdType_Bird_8 = 7,
  BirdType_Bird_9 = 8,
  BirdType_Bird_10 = 9,
  BirdType_Bird_11 = 10,
  BirdType_Bird_12 = 11,
  BirdType_Bird_13 = 12,
  BirdType_Bird_14 = 13,
  BirdType_Bird_15 = 14,
  BirdType_Bird_16 = 15,
  BirdType_Bird_17 = 16,
  BirdType_Num = 17,
  BirdType_MIN = BirdType_Bird_1,
  BirdType_MAX = BirdType_Num
};

inline const BirdType (&EnumValuesBirdType())[18] {
  static const BirdType values[] = {
    BirdType_Bird_1,
    BirdType_Bird_2,
    BirdType_Bird_3,
    BirdType_Bird_4,
    BirdType_Bird_5,
    BirdType_Bird_6,
    BirdType_Bird_7,
    BirdType_Bird_8,
    BirdType_Bird_9,
    BirdType_Bird_10,
    BirdType_Bird_11,
    BirdType_Bird_12,
    BirdType_Bird_13,
    BirdType_Bird_14,
    BirdType_Bird_15,
    BirdType_Bird_16,
    BirdType_Bird_17,
    BirdType_Num
  };
  return values;
}

inline const char * const *EnumNamesBirdType() {
  static const char * const names[19] = {
    "Bird_1",
    "Bird_2",
    "Bird_3",
    "Bird_4",
    "Bird_5",
    "Bird_6",
    "Bird_7",
    "Bird_8",
    "Bird_9",
    "Bird_10",
    "Bird_11",
    "Bird_12",
    "Bird_13",
    "Bird_14",
    "Bird_15",
    "Bird_16",
    "Bird_17",
    "Num",
    nullptr
  };
  return names;
}

inline const char *EnumNameBirdType(BirdType e) {
  if (e < BirdType_Bird_1 || e > BirdType_Num) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBirdType()[index];
}

struct BirdInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_BIRDTYPE = 6
  };
  uint8_t id() const {
    return GetField<uint8_t>(VT_ID, 0);
  }
  FlappyBird::BirdType birdType() const {
    return static_cast<FlappyBird::BirdType>(GetField<int8_t>(VT_BIRDTYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ID) &&
           VerifyField<int8_t>(verifier, VT_BIRDTYPE) &&
           verifier.EndTable();
  }
};

struct BirdInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint8_t id) {
    fbb_.AddElement<uint8_t>(BirdInfo::VT_ID, id, 0);
  }
  void add_birdType(FlappyBird::BirdType birdType) {
    fbb_.AddElement<int8_t>(BirdInfo::VT_BIRDTYPE, static_cast<int8_t>(birdType), 0);
  }
  explicit BirdInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BirdInfoBuilder &operator=(const BirdInfoBuilder &);
  flatbuffers::Offset<BirdInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BirdInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<BirdInfo> CreateBirdInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t id = 0,
    FlappyBird::BirdType birdType = FlappyBird::BirdType_Bird_1) {
  BirdInfoBuilder builder_(_fbb);
  builder_.add_birdType(birdType);
  builder_.add_id(id);
  return builder_.Finish();
}

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_BIRDTYPE = 6,
    VT_ID = 8,
    VT_TIMEWAITING = 10,
    VT_BIRDS = 12,
    VT_IDS = 14,
    VT_SEED = 16,
    VT_LASTTIMEWINER = 18,
    VT_VERSION = 20
  };
  FlappyBird::Type type() const {
    return static_cast<FlappyBird::Type>(GetField<int8_t>(VT_TYPE, 0));
  }
  FlappyBird::BirdType birdType() const {
    return static_cast<FlappyBird::BirdType>(GetField<int8_t>(VT_BIRDTYPE, 0));
  }
  uint8_t id() const {
    return GetField<uint8_t>(VT_ID, 0);
  }
  float timeWaiting() const {
    return GetField<float>(VT_TIMEWAITING, 0.0f);
  }
  const flatbuffers::Vector<flatbuffers::Offset<FlappyBird::BirdInfo>> *birds() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FlappyBird::BirdInfo>> *>(VT_BIRDS);
  }
  const flatbuffers::Vector<uint8_t> *ids() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_IDS);
  }
  int32_t seed() const {
    return GetField<int32_t>(VT_SEED, 0);
  }
  bool lastTimeWiner() const {
    return GetField<uint8_t>(VT_LASTTIMEWINER, 0) != 0;
  }
  int32_t version() const {
    return GetField<int32_t>(VT_VERSION, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<int8_t>(verifier, VT_BIRDTYPE) &&
           VerifyField<uint8_t>(verifier, VT_ID) &&
           VerifyField<float>(verifier, VT_TIMEWAITING) &&
           VerifyOffset(verifier, VT_BIRDS) &&
           verifier.VerifyVector(birds()) &&
           verifier.VerifyVectorOfTables(birds()) &&
           VerifyOffset(verifier, VT_IDS) &&
           verifier.VerifyVector(ids()) &&
           VerifyField<int32_t>(verifier, VT_SEED) &&
           VerifyField<uint8_t>(verifier, VT_LASTTIMEWINER) &&
           VerifyField<int32_t>(verifier, VT_VERSION) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(FlappyBird::Type type) {
    fbb_.AddElement<int8_t>(Message::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_birdType(FlappyBird::BirdType birdType) {
    fbb_.AddElement<int8_t>(Message::VT_BIRDTYPE, static_cast<int8_t>(birdType), 0);
  }
  void add_id(uint8_t id) {
    fbb_.AddElement<uint8_t>(Message::VT_ID, id, 0);
  }
  void add_timeWaiting(float timeWaiting) {
    fbb_.AddElement<float>(Message::VT_TIMEWAITING, timeWaiting, 0.0f);
  }
  void add_birds(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FlappyBird::BirdInfo>>> birds) {
    fbb_.AddOffset(Message::VT_BIRDS, birds);
  }
  void add_ids(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ids) {
    fbb_.AddOffset(Message::VT_IDS, ids);
  }
  void add_seed(int32_t seed) {
    fbb_.AddElement<int32_t>(Message::VT_SEED, seed, 0);
  }
  void add_lastTimeWiner(bool lastTimeWiner) {
    fbb_.AddElement<uint8_t>(Message::VT_LASTTIMEWINER, static_cast<uint8_t>(lastTimeWiner), 0);
  }
  void add_version(int32_t version) {
    fbb_.AddElement<int32_t>(Message::VT_VERSION, version, 0);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessageBuilder &operator=(const MessageBuilder &);
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    FlappyBird::Type type = FlappyBird::Type_Play,
    FlappyBird::BirdType birdType = FlappyBird::BirdType_Bird_1,
    uint8_t id = 0,
    float timeWaiting = 0.0f,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FlappyBird::BirdInfo>>> birds = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> ids = 0,
    int32_t seed = 0,
    bool lastTimeWiner = false,
    int32_t version = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_version(version);
  builder_.add_seed(seed);
  builder_.add_ids(ids);
  builder_.add_birds(birds);
  builder_.add_timeWaiting(timeWaiting);
  builder_.add_lastTimeWiner(lastTimeWiner);
  builder_.add_id(id);
  builder_.add_birdType(birdType);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message> CreateMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    FlappyBird::Type type = FlappyBird::Type_Play,
    FlappyBird::BirdType birdType = FlappyBird::BirdType_Bird_1,
    uint8_t id = 0,
    float timeWaiting = 0.0f,
    const std::vector<flatbuffers::Offset<FlappyBird::BirdInfo>> *birds = nullptr,
    const std::vector<uint8_t> *ids = nullptr,
    int32_t seed = 0,
    bool lastTimeWiner = false,
    int32_t version = 0) {
  auto birds__ = birds ? _fbb.CreateVector<flatbuffers::Offset<FlappyBird::BirdInfo>>(*birds) : 0;
  auto ids__ = ids ? _fbb.CreateVector<uint8_t>(*ids) : 0;
  return FlappyBird::CreateMessage(
      _fbb,
      type,
      birdType,
      id,
      timeWaiting,
      birds__,
      ids__,
      seed,
      lastTimeWiner,
      version);
}

inline const FlappyBird::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<FlappyBird::Message>(buf);
}

inline const FlappyBird::Message *GetSizePrefixedMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FlappyBird::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlappyBird::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlappyBird::Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FlappyBird::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FlappyBird::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FlappyBird

#endif  // FLATBUFFERS_GENERATED_MESSAGE_FLAPPYBIRD_H_
